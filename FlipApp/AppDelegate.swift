import FirebaseCoreimport UIKitimport FirebaseAuthclass FlipAppDelegate: NSObject, UIApplicationDelegate {    func application(        _ application: UIApplication,        didFinishLaunchingWithOptions launchOptions: [UIApplication            .LaunchOptionsKey: Any]? = nil    ) -> Bool {        // Don't re-configure Firebase here since we already did it in App.swift        // We'll just check if it's configured        if FirebaseApp.app() == nil {            FirebaseApp.configure()        }                let locationHandler = LocationHandler.shared        // Only restart location if actually in a session        let appManager = AppManager.shared        if appManager.currentState == .tracking || appManager.currentState == .countdown {            if locationHandler.updatesStarted {                if PermissionManager.shared.locationAuthStatus == .authorizedWhenInUse ||                   PermissionManager.shared.locationAuthStatus == .authorizedAlways {                    // Start location updates                    locationHandler.startLocationUpdates()                }            }            // If a background activity session was previously active, reinstantiate it            if locationHandler.backgroundActivity {                locationHandler.backgroundActivity = true            }        }                // Create test session to ensure collection exists - call after a delay        // to allow Firebase auth to complete        DispatchQueue.main.asyncAfter(deadline: .now() + 3) {            self.ensureSessionLocationCollectionExists()        }                // Set up weekly data cleanup        scheduleWeeklyDataCleanup()                // Start notification listener if user is logged in        if Auth.auth().currentUser != nil {            NotificationListener.shared.startListening()            NotificationListener.shared.updateBadgeCount()        }                return true    }        // Add these lifecycle methods    func applicationDidEnterBackground(_ application: UIApplication) {        // Check if in an active session        let appManager = AppManager.shared        if appManager.currentState != .tracking && appManager.currentState != .countdown {            // Not in an active session, so completely stop location tracking            Task { @MainActor in                LocationHandler.shared.completelyStopLocationUpdates()            }        }    }        func applicationWillTerminate(_ application: UIApplication) {        // Always stop location tracking when app terminates        Task { @MainActor in            LocationHandler.shared.completelyStopLocationUpdates()        }                // Stop notification listener        NotificationListener.shared.stopListening()    }        func applicationDidBecomeActive(_ application: UIApplication) {        // Restart notification listener if needed        if Auth.auth().currentUser != nil {            // Reset all notifications and badge count on app launch            NotificationListener.shared.resetAllNotifications()                        // Then start the listener for new notifications            NotificationListener.shared.startListening()            NotificationListener.shared.updateBadgeCount()        }                // Check if we need to update building        if AppManager.shared.currentState != .tracking && AppManager.shared.currentState != .countdown {            // Not in an active session, check for new buildings            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {                RegionalViewModel.shared.refreshCurrentBuilding()            }        }    }        func ensureSessionLocationCollectionExists() {        guard let _ = Auth.auth().currentUser else {            // User not logged in yet, try again after a delay            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {                self.ensureSessionLocationCollectionExists()            }            return        }                FirebaseManager.shared.createTestSessionLocation()    }}extension FlipAppDelegate {    func scheduleWeeklyDataCleanup() {        // Set up a weekly timer for data cleanup        let calendar = Calendar.current        let now = Date()                // Schedule for Sunday at 3 AM        var nextCleanupComponents = DateComponents()        nextCleanupComponents.weekday = 1  // Sunday        nextCleanupComponents.hour = 3     // 3 AM        nextCleanupComponents.minute = 0                guard let nextCleanup = calendar.nextDate(after: now, matching: nextCleanupComponents, matchingPolicy: .nextTime) else {            print("Could not schedule next cleanup")            return        }                let timeInterval = nextCleanup.timeIntervalSince(now)                Timer.scheduledTimer(withTimeInterval: timeInterval, repeats: false) { [weak self] _ in            FirebaseManager.shared.cleanupOldLocationData()                        // Schedule the next cleanup            self?.scheduleWeeklyDataCleanup()        }                print("Scheduled next data cleanup for \(nextCleanup)")    }}