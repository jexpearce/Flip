import FirebaseCoreimport UIKitclass FlipAppDelegate: NSObject, UIApplicationDelegate {    func application(        _ application: UIApplication,        didFinishLaunchingWithOptions launchOptions: [UIApplication            .LaunchOptionsKey: Any]? = nil    ) -> Bool {        // Don't re-configure Firebase here since we already did it in App.swift        // We'll just check if it's configured        if FirebaseApp.app() == nil {            FirebaseApp.configure()        }                let locationHandler = LocationHandler.shared        // Only restart location if actually in a session        let appManager = AppManager.shared        if appManager.currentState == .tracking || appManager.currentState == .countdown {            if locationHandler.updatesStarted {                locationHandler.startLocationUpdates()            }            // If a background activity session was previously active, reinstantiate it            if locationHandler.backgroundActivity {                locationHandler.backgroundActivity = true            }        }        return true    }        // Add these lifecycle methods    func applicationDidEnterBackground(_ application: UIApplication) {        // Check if in an active session        let appManager = AppManager.shared        if appManager.currentState != .tracking && appManager.currentState != .countdown {            // Not in an active session, so completely stop location tracking            Task { @MainActor in                LocationHandler.shared.completelyStopLocationUpdates()            }        }    }        func applicationWillTerminate(_ application: UIApplication) {        // Always stop location tracking when app terminates        Task { @MainActor in            LocationHandler.shared.completelyStopLocationUpdates()        }    }}extension FlipAppDelegate {    func scheduleWeeklyDataCleanup() {        // Set up a weekly timer for data cleanup        let calendar = Calendar.current        let now = Date()                // Schedule for Sunday at 3 AM        var nextCleanupComponents = DateComponents()        nextCleanupComponents.weekday = 1  // Sunday        nextCleanupComponents.hour = 3     // 3 AM        nextCleanupComponents.minute = 0                guard let nextCleanup = calendar.nextDate(after: now, matching: nextCleanupComponents, matchingPolicy: .nextTime) else {            print("Could not schedule next cleanup")            return        }                let timeInterval = nextCleanup.timeIntervalSince(now)                Timer.scheduledTimer(withTimeInterval: timeInterval, repeats: false) { [weak self] _ in            FirebaseManager.shared.cleanupOldLocationData()                        // Schedule the next cleanup            self?.scheduleWeeklyDataCleanup()        }                print("Scheduled next data cleanup for \(nextCleanup)")    }}// Then in your application(_:didFinishLaunchingWithOptions:) method, add:// scheduleWeeklyDataCleanup()